
LightBulb_SM_SC_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00000862  000008f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080023c  0080023c  00000a32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5f  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ac  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041f  00000000  00000000  000029db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  9e:	0c 94 2f 04 	jmp	0x85e	; 0x85e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <handle_action>:
/************************************************************************/
/* Do the action before entering the state                              */
/************************************************************************/
void handle_action(unsigned int state, unsigned int event)
{
	switch (state)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	19 f0       	breq	.+6      	; 0xb0 <handle_action+0xa>
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	31 f0       	breq	.+12     	; 0xba <handle_action+0x14>
  ae:	08 95       	ret
	{
		case S_LIGHT_ON:
		{
			switch (event)
  b0:	62 30       	cpi	r22, 0x02	; 2
  b2:	71 05       	cpc	r23, r1
  b4:	31 f4       	brne	.+12     	; 0xc2 <handle_action+0x1c>
			{
				case E_BUTTON_OFF:
					PORTC &= ~(1 << DDC5);	// Turn on the LED;
  b6:	45 98       	cbi	0x08, 5	; 8
					//printf("Button OFF event detected, event is = %d \n", event);
					break;
  b8:	08 95       	ret
		}
		break;
		
		case S_LIGHT_OFF:
		{
			switch (event)
  ba:	61 30       	cpi	r22, 0x01	; 1
  bc:	71 05       	cpc	r23, r1
  be:	09 f4       	brne	.+2      	; 0xc2 <handle_action+0x1c>
			{
				case E_BUTTON_ON:
					PORTC |= (1 << DDC5); //led port high 
  c0:	45 9a       	sbi	0x08, 5	; 8
  c2:	08 95       	ret

000000c4 <handle_SM>:
/************************************************************************/
unsigned int handle_SM(unsigned int state, unsigned int event)
{
	unsigned int new_state = state;
	
	switch (state)
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	21 f0       	breq	.+8      	; 0xd0 <handle_SM+0xc>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	c1 f0       	breq	.+48     	; 0xfe <handle_SM+0x3a>
  ce:	08 95       	ret
	{
		case S_LIGHT_ON:
		{
			switch (event)
  d0:	62 30       	cpi	r22, 0x02	; 2
  d2:	71 05       	cpc	r23, r1
  d4:	51 f5       	brne	.+84     	; 0x12a <handle_SM+0x66>
			{
				case E_BUTTON_OFF:
					new_state = S_LIGHT_OFF; // set the state to E_LIGHT_ON
					printf("State is = %d, event is %d and light is OFF\n", state, event);
  d6:	1f 92       	push	r1
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	8f 93       	push	r24
  dc:	1f 92       	push	r1
  de:	1f 92       	push	r1
  e0:	8c e1       	ldi	r24, 0x1C	; 28
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	9f 93       	push	r25
  e6:	8f 93       	push	r24
  e8:	0e 94 21 01 	call	0x242	; 0x242 <printf>
					break;
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
		case S_LIGHT_ON:
		{
			switch (event)
			{
				case E_BUTTON_OFF:
					new_state = S_LIGHT_OFF; // set the state to E_LIGHT_ON
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
					printf("State is = %d, event is %d and light is OFF\n", state, event);
					break;
  fc:	08 95       	ret
		}
		break;
		
		case S_LIGHT_OFF:
		{
			switch (event)
  fe:	61 30       	cpi	r22, 0x01	; 1
 100:	71 05       	cpc	r23, r1
 102:	99 f4       	brne	.+38     	; 0x12a <handle_SM+0x66>
			{
				case E_BUTTON_ON:
					new_state = S_LIGHT_ON;
					printf("State is = %d, event is %d and light is ON\n", state, event);
 104:	1f 92       	push	r1
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	8f 93       	push	r24
 10a:	1f 92       	push	r1
 10c:	8f 93       	push	r24
 10e:	89 e4       	ldi	r24, 0x49	; 73
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	9f 93       	push	r25
 114:	8f 93       	push	r24
 116:	0e 94 21 01 	call	0x242	; 0x242 <printf>
					break;
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
		case S_LIGHT_OFF:
		{
			switch (event)
			{
				case E_BUTTON_ON:
					new_state = S_LIGHT_ON;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
			}			
		}
		break;
	}
	return new_state;
}
 12a:	08 95       	ret

0000012c <get_button_press>:
{
	int event = NO_EVENT;
	//printf("Event is = %d \n", event); //shows that NO_EVENT has the value 0
	while (event == NO_EVENT)
	{
		if ((PIND & (1 << DDB4)) == 0)
 12c:	4c 99       	sbic	0x09, 4	; 9
 12e:	10 c0       	rjmp	.+32     	; 0x150 <get_button_press+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	80 e7       	ldi	r24, 0x70	; 112
 134:	92 e0       	ldi	r25, 0x02	; 2
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <get_button_press+0xa>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <get_button_press+0x14>
 140:	00 00       	nop
		{
			event = E_BUTTON_ON; 
			_delay_ms(100);
			printf("Button ON event detected \n");
 142:	85 e7       	ldi	r24, 0x75	; 117
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 37 01 	call	0x26e	; 0x26e <puts>
	//printf("Event is = %d \n", event); //shows that NO_EVENT has the value 0
	while (event == NO_EVENT)
	{
		if ((PIND & (1 << DDB4)) == 0)
		{
			event = E_BUTTON_ON; 
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret
			_delay_ms(100);
			printf("Button ON event detected \n");
		}
		else if ((PIND & (1 << DDB3)) == 0)
 150:	4b 99       	sbic	0x09, 3	; 9
 152:	ec cf       	rjmp	.-40     	; 0x12c <get_button_press>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	80 e7       	ldi	r24, 0x70	; 112
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <get_button_press+0x2e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <get_button_press+0x38>
 164:	00 00       	nop
		{
			event = E_BUTTON_OFF;
			_delay_ms(100);
			printf("Button OFF event detected \n");
 166:	8f e8       	ldi	r24, 0x8F	; 143
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 37 01 	call	0x26e	; 0x26e <puts>
			_delay_ms(100);
			printf("Button ON event detected \n");
		}
		else if ((PIND & (1 << DDB3)) == 0)
		{
			event = E_BUTTON_OFF;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	90 e0       	ldi	r25, 0x00	; 0
		{
			/* None of the buttons have been pressed - do nothing */ 			
		}
	}
	return event;
}
 172:	08 95       	ret

00000174 <main>:
void handle_action(unsigned int state, unsigned int event);
unsigned int handle_SM(unsigned int state, unsigned int event);

int main(void)
{
	ioinit(); //initialize UART
 174:	0e 94 0e 01 	call	0x21c	; 0x21c <ioinit>
	unsigned int state;
	unsigned int event;

	printf("Enum State has these values: \nS_LIGHT_ON = %d\nS_LIGHT_OFF = %d\n\n", S_LIGHT_ON, S_LIGHT_OFF);
 178:	1f 92       	push	r1
 17a:	c1 e0       	ldi	r28, 0x01	; 1
 17c:	cf 93       	push	r28
 17e:	1f 92       	push	r1
 180:	1f 92       	push	r1
 182:	8a ea       	ldi	r24, 0xAA	; 170
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	9f 93       	push	r25
 188:	8f 93       	push	r24
 18a:	0e 94 21 01 	call	0x242	; 0x242 <printf>
	printf("Enum Event has these values: \nNO_EVENT = %d\nE_BUTTON_ON = %d\nE_BUTTON_OFF = %d\n\n", NO_EVENT, E_BUTTON_ON, E_BUTTON_OFF);
 18e:	1f 92       	push	r1
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	8f 93       	push	r24
 194:	1f 92       	push	r1
 196:	cf 93       	push	r28
 198:	1f 92       	push	r1
 19a:	1f 92       	push	r1
 19c:	8b ee       	ldi	r24, 0xEB	; 235
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	0e 94 21 01 	call	0x242	; 0x242 <printf>
	
	/* Setup PC.4 - used to simulate light bulb on/off
	 * PC.4 high -> Light ON  - (LED ON)
	 * PC.4 low  -> Light OFF - (LED OFF)
	 */
	DDRC |= (1 << DDC5);    // Set PC.4 to output direction
 1a8:	3d 9a       	sbi	0x07, 5	; 7
	PORTC &= ~(1 << DDC5);  // Initially turn LED off
 1aa:	45 98       	cbi	0x08, 5	; 8
	
	/* Setup PD.4 and PD.5 as on/off buttons. 
	 * PD.4 (high->low transistion) Light ON
	 * PD.5 (high->low transistion) Light OFF
	 */ 
	PORTD |= (1 << DDD4) | (1 << DDD3);   // Enable pull-up resistor on PD.4 and PD.5.
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	88 61       	ori	r24, 0x18	; 24
 1b0:	8b b9       	out	0x0b, r24	; 11
	DDRD &= ~((1 << DDD4) | (1 << DDD3)); // Set pin 4 and 5 to input direction
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	87 7e       	andi	r24, 0xE7	; 231
 1b6:	8a b9       	out	0x0a, r24	; 10
 1b8:	8d b7       	in	r24, 0x3d	; 61
 1ba:	9e b7       	in	r25, 0x3e	; 62
 1bc:	0e 96       	adiw	r24, 0x0e	; 14
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	9e bf       	out	0x3e, r25	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	8d bf       	out	0x3d, r24	; 61
	 * PC.4 low  -> Light OFF - (LED OFF)
	 */
	DDRC |= (1 << DDC5);    // Set PC.4 to output direction
	PORTC &= ~(1 << DDC5);  // Initially turn LED off

    state = S_LIGHT_OFF;	// Set state variable to initial state.
 1c8:	c1 e0       	ldi	r28, 0x01	; 1
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
	 */
	
	/* Enter the loop testing for events and running the state machine */
    while (1) 
    {
		event = get_button_press();
 1cc:	0e 94 96 00 	call	0x12c	; 0x12c <get_button_press>
 1d0:	8c 01       	movw	r16, r24
		handle_action(state, event);
 1d2:	bc 01       	movw	r22, r24
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <handle_action>
		state = handle_SM(state, event);
 1da:	b8 01       	movw	r22, r16
 1dc:	ce 01       	movw	r24, r28
 1de:	0e 94 62 00 	call	0xc4	; 0xc4 <handle_SM>
 1e2:	ec 01       	movw	r28, r24
 1e4:	f3 cf       	rjmp	.-26     	; 0x1cc <main+0x58>

000001e6 <uart_putchar>:
    stdout = &mystdout; //required by printf
    stdin  = &mystdin; //required by scanf
}

//redirect stdout to UART
int uart_putchar(char c, FILE *stream) {
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 1ea:	8a 30       	cpi	r24, 0x0A	; 10
 1ec:	19 f4       	brne	.+6      	; 0x1f4 <uart_putchar+0xe>
		uart_putchar('\r', stream);
 1ee:	8d e0       	ldi	r24, 0x0D	; 13
 1f0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 1f4:	e0 ec       	ldi	r30, 0xC0	; 192
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	85 ff       	sbrs	r24, 5
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <uart_putchar+0x12>
	UDR0 = c;
 1fe:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <uart_getchar>:

//redirect stdin to UART
int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 20a:	e0 ec       	ldi	r30, 0xC0	; 192
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	ec f7       	brge	.-6      	; 0x20e <uart_getchar+0x4>
	return UDR0;
 214:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	08 95       	ret

0000021c <ioinit>:
static FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ); //redirect uart_getchar() to stdio

void ioinit (void)
{
    //USART Baud rate: 9600, 8data, 1stop
    UBRR0H = MYUBRR >> 8;
 21c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = MYUBRR;
 220:	83 e3       	ldi	r24, 0x33	; 51
 222:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 226:	88 e1       	ldi	r24, 0x18	; 24
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    stdout = &mystdout; //required by printf
 22c:	ec e3       	ldi	r30, 0x3C	; 60
 22e:	f2 e0       	ldi	r31, 0x02	; 2
 230:	8e e0       	ldi	r24, 0x0E	; 14
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	93 83       	std	Z+3, r25	; 0x03
 236:	82 83       	std	Z+2, r24	; 0x02
    stdin  = &mystdin; //required by scanf
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	91 83       	std	Z+1, r25	; 0x01
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <printf>:
 242:	a0 e0       	ldi	r26, 0x00	; 0
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e7 e2       	ldi	r30, 0x27	; 39
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	0c 94 08 04 	jmp	0x810	; 0x810 <__prologue_saves__+0x20>
 24e:	ae 01       	movw	r20, r28
 250:	4b 5f       	subi	r20, 0xFB	; 251
 252:	5f 4f       	sbci	r21, 0xFF	; 255
 254:	fa 01       	movw	r30, r20
 256:	61 91       	ld	r22, Z+
 258:	71 91       	ld	r23, Z+
 25a:	af 01       	movw	r20, r30
 25c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end+0x2>
 260:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__data_end+0x3>
 264:	0e 94 67 01 	call	0x2ce	; 0x2ce <vfprintf>
 268:	e2 e0       	ldi	r30, 0x02	; 2
 26a:	0c 94 24 04 	jmp	0x848	; 0x848 <__epilogue_restores__+0x20>

0000026e <puts>:
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <__data_end+0x2>
 27a:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <__data_end+0x3>
 27e:	23 81       	ldd	r18, Z+3	; 0x03
 280:	21 ff       	sbrs	r18, 1
 282:	1b c0       	rjmp	.+54     	; 0x2ba <puts+0x4c>
 284:	8c 01       	movw	r16, r24
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	f8 01       	movw	r30, r16
 28c:	81 91       	ld	r24, Z+
 28e:	8f 01       	movw	r16, r30
 290:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <__data_end+0x2>
 294:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <__data_end+0x3>
 298:	db 01       	movw	r26, r22
 29a:	18 96       	adiw	r26, 0x08	; 8
 29c:	ed 91       	ld	r30, X+
 29e:	fc 91       	ld	r31, X
 2a0:	19 97       	sbiw	r26, 0x09	; 9
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <puts+0x44>
 2a6:	09 95       	icall
 2a8:	89 2b       	or	r24, r25
 2aa:	79 f3       	breq	.-34     	; 0x28a <puts+0x1c>
 2ac:	df ef       	ldi	r29, 0xFF	; 255
 2ae:	cf ef       	ldi	r28, 0xFF	; 255
 2b0:	ec cf       	rjmp	.-40     	; 0x28a <puts+0x1c>
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	09 95       	icall
 2b6:	89 2b       	or	r24, r25
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <puts+0x52>
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <puts+0x56>
 2c0:	8d 2f       	mov	r24, r29
 2c2:	9c 2f       	mov	r25, r28
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	08 95       	ret

000002ce <vfprintf>:
 2ce:	ab e0       	ldi	r26, 0x0B	; 11
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	ed e6       	ldi	r30, 0x6D	; 109
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__prologue_saves__>
 2da:	6c 01       	movw	r12, r24
 2dc:	7b 01       	movw	r14, r22
 2de:	8a 01       	movw	r16, r20
 2e0:	fc 01       	movw	r30, r24
 2e2:	17 82       	std	Z+7, r1	; 0x07
 2e4:	16 82       	std	Z+6, r1	; 0x06
 2e6:	83 81       	ldd	r24, Z+3	; 0x03
 2e8:	81 ff       	sbrs	r24, 1
 2ea:	cc c1       	rjmp	.+920    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 2ec:	ce 01       	movw	r24, r28
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	3c 01       	movw	r6, r24
 2f2:	f6 01       	movw	r30, r12
 2f4:	93 81       	ldd	r25, Z+3	; 0x03
 2f6:	f7 01       	movw	r30, r14
 2f8:	93 fd       	sbrc	r25, 3
 2fa:	85 91       	lpm	r24, Z+
 2fc:	93 ff       	sbrs	r25, 3
 2fe:	81 91       	ld	r24, Z+
 300:	7f 01       	movw	r14, r30
 302:	88 23       	and	r24, r24
 304:	09 f4       	brne	.+2      	; 0x308 <vfprintf+0x3a>
 306:	ba c1       	rjmp	.+884    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 308:	85 32       	cpi	r24, 0x25	; 37
 30a:	39 f4       	brne	.+14     	; 0x31a <vfprintf+0x4c>
 30c:	93 fd       	sbrc	r25, 3
 30e:	85 91       	lpm	r24, Z+
 310:	93 ff       	sbrs	r25, 3
 312:	81 91       	ld	r24, Z+
 314:	7f 01       	movw	r14, r30
 316:	85 32       	cpi	r24, 0x25	; 37
 318:	29 f4       	brne	.+10     	; 0x324 <vfprintf+0x56>
 31a:	b6 01       	movw	r22, r12
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 322:	e7 cf       	rjmp	.-50     	; 0x2f2 <vfprintf+0x24>
 324:	91 2c       	mov	r9, r1
 326:	21 2c       	mov	r2, r1
 328:	31 2c       	mov	r3, r1
 32a:	ff e1       	ldi	r31, 0x1F	; 31
 32c:	f3 15       	cp	r31, r3
 32e:	d8 f0       	brcs	.+54     	; 0x366 <vfprintf+0x98>
 330:	8b 32       	cpi	r24, 0x2B	; 43
 332:	79 f0       	breq	.+30     	; 0x352 <vfprintf+0x84>
 334:	38 f4       	brcc	.+14     	; 0x344 <vfprintf+0x76>
 336:	80 32       	cpi	r24, 0x20	; 32
 338:	79 f0       	breq	.+30     	; 0x358 <vfprintf+0x8a>
 33a:	83 32       	cpi	r24, 0x23	; 35
 33c:	a1 f4       	brne	.+40     	; 0x366 <vfprintf+0x98>
 33e:	23 2d       	mov	r18, r3
 340:	20 61       	ori	r18, 0x10	; 16
 342:	1d c0       	rjmp	.+58     	; 0x37e <vfprintf+0xb0>
 344:	8d 32       	cpi	r24, 0x2D	; 45
 346:	61 f0       	breq	.+24     	; 0x360 <vfprintf+0x92>
 348:	80 33       	cpi	r24, 0x30	; 48
 34a:	69 f4       	brne	.+26     	; 0x366 <vfprintf+0x98>
 34c:	23 2d       	mov	r18, r3
 34e:	21 60       	ori	r18, 0x01	; 1
 350:	16 c0       	rjmp	.+44     	; 0x37e <vfprintf+0xb0>
 352:	83 2d       	mov	r24, r3
 354:	82 60       	ori	r24, 0x02	; 2
 356:	38 2e       	mov	r3, r24
 358:	e3 2d       	mov	r30, r3
 35a:	e4 60       	ori	r30, 0x04	; 4
 35c:	3e 2e       	mov	r3, r30
 35e:	2a c0       	rjmp	.+84     	; 0x3b4 <vfprintf+0xe6>
 360:	f3 2d       	mov	r31, r3
 362:	f8 60       	ori	r31, 0x08	; 8
 364:	1d c0       	rjmp	.+58     	; 0x3a0 <vfprintf+0xd2>
 366:	37 fc       	sbrc	r3, 7
 368:	2d c0       	rjmp	.+90     	; 0x3c4 <vfprintf+0xf6>
 36a:	20 ed       	ldi	r18, 0xD0	; 208
 36c:	28 0f       	add	r18, r24
 36e:	2a 30       	cpi	r18, 0x0A	; 10
 370:	40 f0       	brcs	.+16     	; 0x382 <vfprintf+0xb4>
 372:	8e 32       	cpi	r24, 0x2E	; 46
 374:	b9 f4       	brne	.+46     	; 0x3a4 <vfprintf+0xd6>
 376:	36 fc       	sbrc	r3, 6
 378:	81 c1       	rjmp	.+770    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 37a:	23 2d       	mov	r18, r3
 37c:	20 64       	ori	r18, 0x40	; 64
 37e:	32 2e       	mov	r3, r18
 380:	19 c0       	rjmp	.+50     	; 0x3b4 <vfprintf+0xe6>
 382:	36 fe       	sbrs	r3, 6
 384:	06 c0       	rjmp	.+12     	; 0x392 <vfprintf+0xc4>
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	98 9e       	mul	r9, r24
 38a:	20 0d       	add	r18, r0
 38c:	11 24       	eor	r1, r1
 38e:	92 2e       	mov	r9, r18
 390:	11 c0       	rjmp	.+34     	; 0x3b4 <vfprintf+0xe6>
 392:	ea e0       	ldi	r30, 0x0A	; 10
 394:	2e 9e       	mul	r2, r30
 396:	20 0d       	add	r18, r0
 398:	11 24       	eor	r1, r1
 39a:	22 2e       	mov	r2, r18
 39c:	f3 2d       	mov	r31, r3
 39e:	f0 62       	ori	r31, 0x20	; 32
 3a0:	3f 2e       	mov	r3, r31
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <vfprintf+0xe6>
 3a4:	8c 36       	cpi	r24, 0x6C	; 108
 3a6:	21 f4       	brne	.+8      	; 0x3b0 <vfprintf+0xe2>
 3a8:	83 2d       	mov	r24, r3
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	38 2e       	mov	r3, r24
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <vfprintf+0xe6>
 3b0:	88 36       	cpi	r24, 0x68	; 104
 3b2:	41 f4       	brne	.+16     	; 0x3c4 <vfprintf+0xf6>
 3b4:	f7 01       	movw	r30, r14
 3b6:	93 fd       	sbrc	r25, 3
 3b8:	85 91       	lpm	r24, Z+
 3ba:	93 ff       	sbrs	r25, 3
 3bc:	81 91       	ld	r24, Z+
 3be:	7f 01       	movw	r14, r30
 3c0:	81 11       	cpse	r24, r1
 3c2:	b3 cf       	rjmp	.-154    	; 0x32a <vfprintf+0x5c>
 3c4:	98 2f       	mov	r25, r24
 3c6:	9f 7d       	andi	r25, 0xDF	; 223
 3c8:	95 54       	subi	r25, 0x45	; 69
 3ca:	93 30       	cpi	r25, 0x03	; 3
 3cc:	28 f4       	brcc	.+10     	; 0x3d8 <vfprintf+0x10a>
 3ce:	0c 5f       	subi	r16, 0xFC	; 252
 3d0:	1f 4f       	sbci	r17, 0xFF	; 255
 3d2:	9f e3       	ldi	r25, 0x3F	; 63
 3d4:	99 83       	std	Y+1, r25	; 0x01
 3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <vfprintf+0x124>
 3d8:	83 36       	cpi	r24, 0x63	; 99
 3da:	31 f0       	breq	.+12     	; 0x3e8 <vfprintf+0x11a>
 3dc:	83 37       	cpi	r24, 0x73	; 115
 3de:	71 f0       	breq	.+28     	; 0x3fc <vfprintf+0x12e>
 3e0:	83 35       	cpi	r24, 0x53	; 83
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <vfprintf+0x118>
 3e4:	59 c0       	rjmp	.+178    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 3e6:	21 c0       	rjmp	.+66     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3e8:	f8 01       	movw	r30, r16
 3ea:	80 81       	ld	r24, Z
 3ec:	89 83       	std	Y+1, r24	; 0x01
 3ee:	0e 5f       	subi	r16, 0xFE	; 254
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
 3f2:	88 24       	eor	r8, r8
 3f4:	83 94       	inc	r8
 3f6:	91 2c       	mov	r9, r1
 3f8:	53 01       	movw	r10, r6
 3fa:	13 c0       	rjmp	.+38     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3fc:	28 01       	movw	r4, r16
 3fe:	f2 e0       	ldi	r31, 0x02	; 2
 400:	4f 0e       	add	r4, r31
 402:	51 1c       	adc	r5, r1
 404:	f8 01       	movw	r30, r16
 406:	a0 80       	ld	r10, Z
 408:	b1 80       	ldd	r11, Z+1	; 0x01
 40a:	36 fe       	sbrs	r3, 6
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40e:	69 2d       	mov	r22, r9
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	6f ef       	ldi	r22, 0xFF	; 255
 416:	7f ef       	ldi	r23, 0xFF	; 255
 418:	c5 01       	movw	r24, r10
 41a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <strnlen>
 41e:	4c 01       	movw	r8, r24
 420:	82 01       	movw	r16, r4
 422:	f3 2d       	mov	r31, r3
 424:	ff 77       	andi	r31, 0x7F	; 127
 426:	3f 2e       	mov	r3, r31
 428:	16 c0       	rjmp	.+44     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 42a:	28 01       	movw	r4, r16
 42c:	22 e0       	ldi	r18, 0x02	; 2
 42e:	42 0e       	add	r4, r18
 430:	51 1c       	adc	r5, r1
 432:	f8 01       	movw	r30, r16
 434:	a0 80       	ld	r10, Z
 436:	b1 80       	ldd	r11, Z+1	; 0x01
 438:	36 fe       	sbrs	r3, 6
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	69 2d       	mov	r22, r9
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	6f ef       	ldi	r22, 0xFF	; 255
 444:	7f ef       	ldi	r23, 0xFF	; 255
 446:	c5 01       	movw	r24, r10
 448:	0e 94 48 03 	call	0x690	; 0x690 <strnlen_P>
 44c:	4c 01       	movw	r8, r24
 44e:	f3 2d       	mov	r31, r3
 450:	f0 68       	ori	r31, 0x80	; 128
 452:	3f 2e       	mov	r3, r31
 454:	82 01       	movw	r16, r4
 456:	33 fc       	sbrc	r3, 3
 458:	1b c0       	rjmp	.+54     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 45a:	82 2d       	mov	r24, r2
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	88 16       	cp	r8, r24
 460:	99 06       	cpc	r9, r25
 462:	b0 f4       	brcc	.+44     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 464:	b6 01       	movw	r22, r12
 466:	80 e2       	ldi	r24, 0x20	; 32
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 46e:	2a 94       	dec	r2
 470:	f4 cf       	rjmp	.-24     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 472:	f5 01       	movw	r30, r10
 474:	37 fc       	sbrc	r3, 7
 476:	85 91       	lpm	r24, Z+
 478:	37 fe       	sbrs	r3, 7
 47a:	81 91       	ld	r24, Z+
 47c:	5f 01       	movw	r10, r30
 47e:	b6 01       	movw	r22, r12
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 486:	21 10       	cpse	r2, r1
 488:	2a 94       	dec	r2
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	82 1a       	sub	r8, r18
 48e:	91 08       	sbc	r9, r1
 490:	81 14       	cp	r8, r1
 492:	91 04       	cpc	r9, r1
 494:	71 f7       	brne	.-36     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 496:	e8 c0       	rjmp	.+464    	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 498:	84 36       	cpi	r24, 0x64	; 100
 49a:	11 f0       	breq	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49c:	89 36       	cpi	r24, 0x69	; 105
 49e:	41 f5       	brne	.+80     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4a0:	f8 01       	movw	r30, r16
 4a2:	37 fe       	sbrs	r3, 7
 4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4a6:	60 81       	ld	r22, Z
 4a8:	71 81       	ldd	r23, Z+1	; 0x01
 4aa:	82 81       	ldd	r24, Z+2	; 0x02
 4ac:	93 81       	ldd	r25, Z+3	; 0x03
 4ae:	0c 5f       	subi	r16, 0xFC	; 252
 4b0:	1f 4f       	sbci	r17, 0xFF	; 255
 4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b4:	60 81       	ld	r22, Z
 4b6:	71 81       	ldd	r23, Z+1	; 0x01
 4b8:	07 2e       	mov	r0, r23
 4ba:	00 0c       	add	r0, r0
 4bc:	88 0b       	sbc	r24, r24
 4be:	99 0b       	sbc	r25, r25
 4c0:	0e 5f       	subi	r16, 0xFE	; 254
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	f3 2d       	mov	r31, r3
 4c6:	ff 76       	andi	r31, 0x6F	; 111
 4c8:	3f 2e       	mov	r3, r31
 4ca:	97 ff       	sbrs	r25, 7
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4ce:	90 95       	com	r25
 4d0:	80 95       	com	r24
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	f0 68       	ori	r31, 0x80	; 128
 4de:	3f 2e       	mov	r3, r31
 4e0:	2a e0       	ldi	r18, 0x0A	; 10
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	a3 01       	movw	r20, r6
 4e6:	0e 94 9a 03 	call	0x734	; 0x734 <__ultoa_invert>
 4ea:	88 2e       	mov	r8, r24
 4ec:	86 18       	sub	r8, r6
 4ee:	45 c0       	rjmp	.+138    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 4f0:	85 37       	cpi	r24, 0x75	; 117
 4f2:	31 f4       	brne	.+12     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f4:	23 2d       	mov	r18, r3
 4f6:	2f 7e       	andi	r18, 0xEF	; 239
 4f8:	b2 2e       	mov	r11, r18
 4fa:	2a e0       	ldi	r18, 0x0A	; 10
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	25 c0       	rjmp	.+74     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 500:	93 2d       	mov	r25, r3
 502:	99 7f       	andi	r25, 0xF9	; 249
 504:	b9 2e       	mov	r11, r25
 506:	8f 36       	cpi	r24, 0x6F	; 111
 508:	c1 f0       	breq	.+48     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 50a:	18 f4       	brcc	.+6      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 50c:	88 35       	cpi	r24, 0x58	; 88
 50e:	79 f0       	breq	.+30     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 510:	b5 c0       	rjmp	.+362    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 512:	80 37       	cpi	r24, 0x70	; 112
 514:	19 f0       	breq	.+6      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 516:	88 37       	cpi	r24, 0x78	; 120
 518:	21 f0       	breq	.+8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 51a:	b0 c0       	rjmp	.+352    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 51c:	e9 2f       	mov	r30, r25
 51e:	e0 61       	ori	r30, 0x10	; 16
 520:	be 2e       	mov	r11, r30
 522:	b4 fe       	sbrs	r11, 4
 524:	0d c0       	rjmp	.+26     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 526:	fb 2d       	mov	r31, r11
 528:	f4 60       	ori	r31, 0x04	; 4
 52a:	bf 2e       	mov	r11, r31
 52c:	09 c0       	rjmp	.+18     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 52e:	34 fe       	sbrs	r3, 4
 530:	0a c0       	rjmp	.+20     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 532:	29 2f       	mov	r18, r25
 534:	26 60       	ori	r18, 0x06	; 6
 536:	b2 2e       	mov	r11, r18
 538:	06 c0       	rjmp	.+12     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 53a:	28 e0       	ldi	r18, 0x08	; 8
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 540:	20 e1       	ldi	r18, 0x10	; 16
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 546:	20 e1       	ldi	r18, 0x10	; 16
 548:	32 e0       	ldi	r19, 0x02	; 2
 54a:	f8 01       	movw	r30, r16
 54c:	b7 fe       	sbrs	r11, 7
 54e:	07 c0       	rjmp	.+14     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 550:	60 81       	ld	r22, Z
 552:	71 81       	ldd	r23, Z+1	; 0x01
 554:	82 81       	ldd	r24, Z+2	; 0x02
 556:	93 81       	ldd	r25, Z+3	; 0x03
 558:	0c 5f       	subi	r16, 0xFC	; 252
 55a:	1f 4f       	sbci	r17, 0xFF	; 255
 55c:	06 c0       	rjmp	.+12     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 55e:	60 81       	ld	r22, Z
 560:	71 81       	ldd	r23, Z+1	; 0x01
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 5f       	subi	r16, 0xFE	; 254
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	a3 01       	movw	r20, r6
 56c:	0e 94 9a 03 	call	0x734	; 0x734 <__ultoa_invert>
 570:	88 2e       	mov	r8, r24
 572:	86 18       	sub	r8, r6
 574:	fb 2d       	mov	r31, r11
 576:	ff 77       	andi	r31, 0x7F	; 127
 578:	3f 2e       	mov	r3, r31
 57a:	36 fe       	sbrs	r3, 6
 57c:	0d c0       	rjmp	.+26     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 57e:	23 2d       	mov	r18, r3
 580:	2e 7f       	andi	r18, 0xFE	; 254
 582:	a2 2e       	mov	r10, r18
 584:	89 14       	cp	r8, r9
 586:	58 f4       	brcc	.+22     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 588:	34 fe       	sbrs	r3, 4
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 58c:	32 fc       	sbrc	r3, 2
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 590:	83 2d       	mov	r24, r3
 592:	8e 7e       	andi	r24, 0xEE	; 238
 594:	a8 2e       	mov	r10, r24
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 598:	b8 2c       	mov	r11, r8
 59a:	a3 2c       	mov	r10, r3
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 59e:	b8 2c       	mov	r11, r8
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 5a2:	b9 2c       	mov	r11, r9
 5a4:	a4 fe       	sbrs	r10, 4
 5a6:	0f c0       	rjmp	.+30     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5a8:	fe 01       	movw	r30, r28
 5aa:	e8 0d       	add	r30, r8
 5ac:	f1 1d       	adc	r31, r1
 5ae:	80 81       	ld	r24, Z
 5b0:	80 33       	cpi	r24, 0x30	; 48
 5b2:	21 f4       	brne	.+8      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b4:	9a 2d       	mov	r25, r10
 5b6:	99 7e       	andi	r25, 0xE9	; 233
 5b8:	a9 2e       	mov	r10, r25
 5ba:	09 c0       	rjmp	.+18     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5bc:	a2 fe       	sbrs	r10, 2
 5be:	06 c0       	rjmp	.+12     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5c0:	b3 94       	inc	r11
 5c2:	b3 94       	inc	r11
 5c4:	04 c0       	rjmp	.+8      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c6:	8a 2d       	mov	r24, r10
 5c8:	86 78       	andi	r24, 0x86	; 134
 5ca:	09 f0       	breq	.+2      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5cc:	b3 94       	inc	r11
 5ce:	a3 fc       	sbrc	r10, 3
 5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5d2:	a0 fe       	sbrs	r10, 0
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5d6:	b2 14       	cp	r11, r2
 5d8:	88 f4       	brcc	.+34     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5da:	28 0c       	add	r2, r8
 5dc:	92 2c       	mov	r9, r2
 5de:	9b 18       	sub	r9, r11
 5e0:	0e c0       	rjmp	.+28     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5e2:	b2 14       	cp	r11, r2
 5e4:	60 f4       	brcc	.+24     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5e6:	b6 01       	movw	r22, r12
 5e8:	80 e2       	ldi	r24, 0x20	; 32
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 5f0:	b3 94       	inc	r11
 5f2:	f7 cf       	rjmp	.-18     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5f4:	b2 14       	cp	r11, r2
 5f6:	18 f4       	brcc	.+6      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5f8:	2b 18       	sub	r2, r11
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5fc:	98 2c       	mov	r9, r8
 5fe:	21 2c       	mov	r2, r1
 600:	a4 fe       	sbrs	r10, 4
 602:	10 c0       	rjmp	.+32     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 604:	b6 01       	movw	r22, r12
 606:	80 e3       	ldi	r24, 0x30	; 48
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 60e:	a2 fe       	sbrs	r10, 2
 610:	17 c0       	rjmp	.+46     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 612:	a1 fc       	sbrc	r10, 1
 614:	03 c0       	rjmp	.+6      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 616:	88 e7       	ldi	r24, 0x78	; 120
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 61c:	88 e5       	ldi	r24, 0x58	; 88
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	b6 01       	movw	r22, r12
 622:	0c c0       	rjmp	.+24     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 624:	8a 2d       	mov	r24, r10
 626:	86 78       	andi	r24, 0x86	; 134
 628:	59 f0       	breq	.+22     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 62a:	a1 fe       	sbrs	r10, 1
 62c:	02 c0       	rjmp	.+4      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 62e:	8b e2       	ldi	r24, 0x2B	; 43
 630:	01 c0       	rjmp	.+2      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 632:	80 e2       	ldi	r24, 0x20	; 32
 634:	a7 fc       	sbrc	r10, 7
 636:	8d e2       	ldi	r24, 0x2D	; 45
 638:	b6 01       	movw	r22, r12
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 640:	89 14       	cp	r8, r9
 642:	38 f4       	brcc	.+14     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 644:	b6 01       	movw	r22, r12
 646:	80 e3       	ldi	r24, 0x30	; 48
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 64e:	9a 94       	dec	r9
 650:	f7 cf       	rjmp	.-18     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 652:	8a 94       	dec	r8
 654:	f3 01       	movw	r30, r6
 656:	e8 0d       	add	r30, r8
 658:	f1 1d       	adc	r31, r1
 65a:	80 81       	ld	r24, Z
 65c:	b6 01       	movw	r22, r12
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 664:	81 10       	cpse	r8, r1
 666:	f5 cf       	rjmp	.-22     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 668:	22 20       	and	r2, r2
 66a:	09 f4       	brne	.+2      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
 66c:	42 ce       	rjmp	.-892    	; 0x2f2 <vfprintf+0x24>
 66e:	b6 01       	movw	r22, r12
 670:	80 e2       	ldi	r24, 0x20	; 32
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 5e 03 	call	0x6bc	; 0x6bc <fputc>
 678:	2a 94       	dec	r2
 67a:	f6 cf       	rjmp	.-20     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 67c:	f6 01       	movw	r30, r12
 67e:	86 81       	ldd	r24, Z+6	; 0x06
 680:	97 81       	ldd	r25, Z+7	; 0x07
 682:	02 c0       	rjmp	.+4      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	9f ef       	ldi	r25, 0xFF	; 255
 688:	2b 96       	adiw	r28, 0x0b	; 11
 68a:	e2 e1       	ldi	r30, 0x12	; 18
 68c:	0c 94 14 04 	jmp	0x828	; 0x828 <__epilogue_restores__>

00000690 <strnlen_P>:
 690:	fc 01       	movw	r30, r24
 692:	05 90       	lpm	r0, Z+
 694:	61 50       	subi	r22, 0x01	; 1
 696:	70 40       	sbci	r23, 0x00	; 0
 698:	01 10       	cpse	r0, r1
 69a:	d8 f7       	brcc	.-10     	; 0x692 <strnlen_P+0x2>
 69c:	80 95       	com	r24
 69e:	90 95       	com	r25
 6a0:	8e 0f       	add	r24, r30
 6a2:	9f 1f       	adc	r25, r31
 6a4:	08 95       	ret

000006a6 <strnlen>:
 6a6:	fc 01       	movw	r30, r24
 6a8:	61 50       	subi	r22, 0x01	; 1
 6aa:	70 40       	sbci	r23, 0x00	; 0
 6ac:	01 90       	ld	r0, Z+
 6ae:	01 10       	cpse	r0, r1
 6b0:	d8 f7       	brcc	.-10     	; 0x6a8 <strnlen+0x2>
 6b2:	80 95       	com	r24
 6b4:	90 95       	com	r25
 6b6:	8e 0f       	add	r24, r30
 6b8:	9f 1f       	adc	r25, r31
 6ba:	08 95       	ret

000006bc <fputc>:
 6bc:	0f 93       	push	r16
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	fb 01       	movw	r30, r22
 6c6:	23 81       	ldd	r18, Z+3	; 0x03
 6c8:	21 fd       	sbrc	r18, 1
 6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <fputc+0x16>
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	9f ef       	ldi	r25, 0xFF	; 255
 6d0:	2c c0       	rjmp	.+88     	; 0x72a <fputc+0x6e>
 6d2:	22 ff       	sbrs	r18, 2
 6d4:	16 c0       	rjmp	.+44     	; 0x702 <fputc+0x46>
 6d6:	46 81       	ldd	r20, Z+6	; 0x06
 6d8:	57 81       	ldd	r21, Z+7	; 0x07
 6da:	24 81       	ldd	r18, Z+4	; 0x04
 6dc:	35 81       	ldd	r19, Z+5	; 0x05
 6de:	42 17       	cp	r20, r18
 6e0:	53 07       	cpc	r21, r19
 6e2:	44 f4       	brge	.+16     	; 0x6f4 <fputc+0x38>
 6e4:	a0 81       	ld	r26, Z
 6e6:	b1 81       	ldd	r27, Z+1	; 0x01
 6e8:	9d 01       	movw	r18, r26
 6ea:	2f 5f       	subi	r18, 0xFF	; 255
 6ec:	3f 4f       	sbci	r19, 0xFF	; 255
 6ee:	31 83       	std	Z+1, r19	; 0x01
 6f0:	20 83       	st	Z, r18
 6f2:	8c 93       	st	X, r24
 6f4:	26 81       	ldd	r18, Z+6	; 0x06
 6f6:	37 81       	ldd	r19, Z+7	; 0x07
 6f8:	2f 5f       	subi	r18, 0xFF	; 255
 6fa:	3f 4f       	sbci	r19, 0xFF	; 255
 6fc:	37 83       	std	Z+7, r19	; 0x07
 6fe:	26 83       	std	Z+6, r18	; 0x06
 700:	14 c0       	rjmp	.+40     	; 0x72a <fputc+0x6e>
 702:	8b 01       	movw	r16, r22
 704:	ec 01       	movw	r28, r24
 706:	fb 01       	movw	r30, r22
 708:	00 84       	ldd	r0, Z+8	; 0x08
 70a:	f1 85       	ldd	r31, Z+9	; 0x09
 70c:	e0 2d       	mov	r30, r0
 70e:	09 95       	icall
 710:	89 2b       	or	r24, r25
 712:	e1 f6       	brne	.-72     	; 0x6cc <fputc+0x10>
 714:	d8 01       	movw	r26, r16
 716:	16 96       	adiw	r26, 0x06	; 6
 718:	8d 91       	ld	r24, X+
 71a:	9c 91       	ld	r25, X
 71c:	17 97       	sbiw	r26, 0x07	; 7
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	17 96       	adiw	r26, 0x07	; 7
 722:	9c 93       	st	X, r25
 724:	8e 93       	st	-X, r24
 726:	16 97       	sbiw	r26, 0x06	; 6
 728:	ce 01       	movw	r24, r28
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	08 95       	ret

00000734 <__ultoa_invert>:
 734:	fa 01       	movw	r30, r20
 736:	aa 27       	eor	r26, r26
 738:	28 30       	cpi	r18, 0x08	; 8
 73a:	51 f1       	breq	.+84     	; 0x790 <__ultoa_invert+0x5c>
 73c:	20 31       	cpi	r18, 0x10	; 16
 73e:	81 f1       	breq	.+96     	; 0x7a0 <__ultoa_invert+0x6c>
 740:	e8 94       	clt
 742:	6f 93       	push	r22
 744:	6e 7f       	andi	r22, 0xFE	; 254
 746:	6e 5f       	subi	r22, 0xFE	; 254
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	af 4f       	sbci	r26, 0xFF	; 255
 750:	b1 e0       	ldi	r27, 0x01	; 1
 752:	3e d0       	rcall	.+124    	; 0x7d0 <__ultoa_invert+0x9c>
 754:	b4 e0       	ldi	r27, 0x04	; 4
 756:	3c d0       	rcall	.+120    	; 0x7d0 <__ultoa_invert+0x9c>
 758:	67 0f       	add	r22, r23
 75a:	78 1f       	adc	r23, r24
 75c:	89 1f       	adc	r24, r25
 75e:	9a 1f       	adc	r25, r26
 760:	a1 1d       	adc	r26, r1
 762:	68 0f       	add	r22, r24
 764:	79 1f       	adc	r23, r25
 766:	8a 1f       	adc	r24, r26
 768:	91 1d       	adc	r25, r1
 76a:	a1 1d       	adc	r26, r1
 76c:	6a 0f       	add	r22, r26
 76e:	71 1d       	adc	r23, r1
 770:	81 1d       	adc	r24, r1
 772:	91 1d       	adc	r25, r1
 774:	a1 1d       	adc	r26, r1
 776:	20 d0       	rcall	.+64     	; 0x7b8 <__ultoa_invert+0x84>
 778:	09 f4       	brne	.+2      	; 0x77c <__ultoa_invert+0x48>
 77a:	68 94       	set
 77c:	3f 91       	pop	r19
 77e:	2a e0       	ldi	r18, 0x0A	; 10
 780:	26 9f       	mul	r18, r22
 782:	11 24       	eor	r1, r1
 784:	30 19       	sub	r19, r0
 786:	30 5d       	subi	r19, 0xD0	; 208
 788:	31 93       	st	Z+, r19
 78a:	de f6       	brtc	.-74     	; 0x742 <__ultoa_invert+0xe>
 78c:	cf 01       	movw	r24, r30
 78e:	08 95       	ret
 790:	46 2f       	mov	r20, r22
 792:	47 70       	andi	r20, 0x07	; 7
 794:	40 5d       	subi	r20, 0xD0	; 208
 796:	41 93       	st	Z+, r20
 798:	b3 e0       	ldi	r27, 0x03	; 3
 79a:	0f d0       	rcall	.+30     	; 0x7ba <__ultoa_invert+0x86>
 79c:	c9 f7       	brne	.-14     	; 0x790 <__ultoa_invert+0x5c>
 79e:	f6 cf       	rjmp	.-20     	; 0x78c <__ultoa_invert+0x58>
 7a0:	46 2f       	mov	r20, r22
 7a2:	4f 70       	andi	r20, 0x0F	; 15
 7a4:	40 5d       	subi	r20, 0xD0	; 208
 7a6:	4a 33       	cpi	r20, 0x3A	; 58
 7a8:	18 f0       	brcs	.+6      	; 0x7b0 <__ultoa_invert+0x7c>
 7aa:	49 5d       	subi	r20, 0xD9	; 217
 7ac:	31 fd       	sbrc	r19, 1
 7ae:	40 52       	subi	r20, 0x20	; 32
 7b0:	41 93       	st	Z+, r20
 7b2:	02 d0       	rcall	.+4      	; 0x7b8 <__ultoa_invert+0x84>
 7b4:	a9 f7       	brne	.-22     	; 0x7a0 <__ultoa_invert+0x6c>
 7b6:	ea cf       	rjmp	.-44     	; 0x78c <__ultoa_invert+0x58>
 7b8:	b4 e0       	ldi	r27, 0x04	; 4
 7ba:	a6 95       	lsr	r26
 7bc:	97 95       	ror	r25
 7be:	87 95       	ror	r24
 7c0:	77 95       	ror	r23
 7c2:	67 95       	ror	r22
 7c4:	ba 95       	dec	r27
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__ultoa_invert+0x86>
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	61 05       	cpc	r22, r1
 7cc:	71 05       	cpc	r23, r1
 7ce:	08 95       	ret
 7d0:	9b 01       	movw	r18, r22
 7d2:	ac 01       	movw	r20, r24
 7d4:	0a 2e       	mov	r0, r26
 7d6:	06 94       	lsr	r0
 7d8:	57 95       	ror	r21
 7da:	47 95       	ror	r20
 7dc:	37 95       	ror	r19
 7de:	27 95       	ror	r18
 7e0:	ba 95       	dec	r27
 7e2:	c9 f7       	brne	.-14     	; 0x7d6 <__ultoa_invert+0xa2>
 7e4:	62 0f       	add	r22, r18
 7e6:	73 1f       	adc	r23, r19
 7e8:	84 1f       	adc	r24, r20
 7ea:	95 1f       	adc	r25, r21
 7ec:	a0 1d       	adc	r26, r0
 7ee:	08 95       	ret

000007f0 <__prologue_saves__>:
 7f0:	2f 92       	push	r2
 7f2:	3f 92       	push	r3
 7f4:	4f 92       	push	r4
 7f6:	5f 92       	push	r5
 7f8:	6f 92       	push	r6
 7fa:	7f 92       	push	r7
 7fc:	8f 92       	push	r8
 7fe:	9f 92       	push	r9
 800:	af 92       	push	r10
 802:	bf 92       	push	r11
 804:	cf 92       	push	r12
 806:	df 92       	push	r13
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	ca 1b       	sub	r28, r26
 81a:	db 0b       	sbc	r29, r27
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
 826:	09 94       	ijmp

00000828 <__epilogue_restores__>:
 828:	2a 88       	ldd	r2, Y+18	; 0x12
 82a:	39 88       	ldd	r3, Y+17	; 0x11
 82c:	48 88       	ldd	r4, Y+16	; 0x10
 82e:	5f 84       	ldd	r5, Y+15	; 0x0f
 830:	6e 84       	ldd	r6, Y+14	; 0x0e
 832:	7d 84       	ldd	r7, Y+13	; 0x0d
 834:	8c 84       	ldd	r8, Y+12	; 0x0c
 836:	9b 84       	ldd	r9, Y+11	; 0x0b
 838:	aa 84       	ldd	r10, Y+10	; 0x0a
 83a:	b9 84       	ldd	r11, Y+9	; 0x09
 83c:	c8 84       	ldd	r12, Y+8	; 0x08
 83e:	df 80       	ldd	r13, Y+7	; 0x07
 840:	ee 80       	ldd	r14, Y+6	; 0x06
 842:	fd 80       	ldd	r15, Y+5	; 0x05
 844:	0c 81       	ldd	r16, Y+4	; 0x04
 846:	1b 81       	ldd	r17, Y+3	; 0x03
 848:	aa 81       	ldd	r26, Y+2	; 0x02
 84a:	b9 81       	ldd	r27, Y+1	; 0x01
 84c:	ce 0f       	add	r28, r30
 84e:	d1 1d       	adc	r29, r1
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	ed 01       	movw	r28, r26
 85c:	08 95       	ret

0000085e <_exit>:
 85e:	f8 94       	cli

00000860 <__stop_program>:
 860:	ff cf       	rjmp	.-2      	; 0x860 <__stop_program>
